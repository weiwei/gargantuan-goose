---
import { HW, Run, OS, db, desc, eq, like } from "astro:db";
import ConfigTableCard from "./ConfigTableCard.astro";
import DashPieChart from "./PieChartCard.tsx";
import SummaryCard from "./SummaryCard.astro";
import BarChartCard from "./BarChartCard";

interface Props {
  commandStr: string;
}

const { commandStr } = Astro.props;

const runs = await db
  .select()
  .from(Run)
  .where(like(Run.command, `${commandStr}%`))
  .innerJoin(OS, eq(Run.osId, OS.id))
  .innerJoin(HW, eq(Run.hwId, HW.id))
  .orderBy(desc(Run.date));
const hwConfigs = await db.select().from(HW);
const osConfigs = await db.select().from(OS);
const durations = runs.map((r) => r.Run.duration / 1000);
---

<main class="m-4 grid gap-4">
  <div class="grid grid-cols-3 gap-2">
    <SummaryCard
      icon="mdi:file-document-box-multiple-outline"
      data={runs.length.toString()}
      title="Data entries"
      change={0.2}
    />
    <SummaryCard
      icon="mdi:computer"
      data={hwConfigs.length.toString()}
      title="HW Configs"
      change={0.2}
    />
    <SummaryCard
      icon="mdi:account"
      data={osConfigs.length.toString()}
      title="OS Configs"
      change={0.2}
    />
    <SummaryCard
      icon="mdi:account"
      data={Math.floor(Math.max(...durations)).toString()}
      title="Fastest"
    />
    <SummaryCard
      icon="mdi:account"
      data={Math.floor(Math.min(...durations)).toString()}
      title="Slowest"
    />
    <SummaryCard
      icon="mdi:account"
      data={Math.floor(durations.reduce((a, b) => a + b) / durations.length).toString()}
      title="Average"
    />
  </div>
  <BarChartCard client:only />
</main>
